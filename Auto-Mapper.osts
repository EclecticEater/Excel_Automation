function main(workbook: ExcelScript.Workbook) {

  const revMappingSheetName = "Israel"; // name of the worksheet of the Reg and the column in the Main sheet

  let allWorksheets = workbook.getWorksheets(); //for  main sheet

  var revMapSheet = workbook.getWorksheet(revMappingSheetName);

  var revMapIDCellValues = revMapSheet.getUsedRange().getColumn(0).getValues();

  // Iterate over all worksheets with a period in their name 

  for (let worksheets of allWorksheets) {

    if (worksheets.getRange().getFormat().getHorizontalAlignment() && worksheets.getRange().getFormat().getHorizontalAlignment().toString() == "General") {

        console.log("Moving to: " + worksheets.getName() + " **If there is not a statement below saying the reg was found, a typo exists in this worksheet for the Reg header.");
        // Find the row with the word to search for 

        let dataRange = worksheets.getUsedRange();

        let headerRow = dataRange.getRow(0).getValues()[0];

        let wordCol = headerRow.indexOf(revMappingSheetName);

        if (wordCol !== -1) {

          // Iterate over the cells in the column with the word to search for 
          console.log("!!! Found " + revMappingSheetName + " in " + worksheets.getName());

          let columnRange = worksheets.getRangeByIndexes(1, wordCol, dataRange.getRowCount() - 1, 1);

          let columnValues = columnRange.getValues();

          for (let j = 0; j < columnValues.length; j++) {

            let cellValue = columnValues[j][0].toString();

            if (cellValue) { // skip empty cells 

              let items = cellValue.split("\n"); // split the cell contents into a list based on line feed 

              for (let k = 0; k < items.length; k++) {

                let item = items[k].trim();

                if (item !== "No Mapping") { // check if the item is not equal to the "no mapping" text 

                  revMapIDCellValues.forEach((rowItem, rowIndex) => {

                    let key = rowItem[0].toString().trim();

                    let tcrIDCol = headerRow.indexOf("TCR ID");

                    if (key == item && key !== "" && tcrIDCol !== -1) {

                        let tcrIDCell = worksheets.getCell(j + 1, tcrIDCol).getValue();

                        let creditCell = worksheets.getCell(j + 1, wordCol + 1).getValue().toString().split("\n")[k];

                        let targetCell = revMapSheet.getCell(rowIndex, 2);

                        let targetvalue = targetCell.getValue();

                        let newValue = targetvalue + "\n" + tcrIDCell + " (" + creditCell + ")";

                        targetCell.setValue(newValue);
                      
                    }

                  });

                }

              }

            }
            else{
              console.log("Cells in " + worksheets.getName() + " are missing mappings.");
            }

          }

        }
    
      }
    
  }
  let range = revMapSheet.getUsedRange().getColumn(2)
  let values = range.getValues();
  for (let i = 0; i < values.length; i++) {
    for (let j = 0; j < values[i].length; j++) {
      values[i][j] = values[i][j].toString().replace(/^\n+|\n+$/g, '');
    }
  }
  range.setValues(values);
  
console.log("Finished... Send Accolades to Bruce and Justin <3 <3")
}
